# x10_scaled
point <- unequal_norm[ , 1:2]
point[nrow(point) + 1 , ] = c(1, 0)
tail(scale(point))
# x10_scaled_x1 <- (1 - mean(unequal_scales$x1))/sd(unequal_scales$x1)
#
# x10_scaled_x2 <- (0 - mean(unequal_scales$x2))/sd(unequal_scales$x2)
#
# x10_scaled <- c(x10_scaled_x1, x10_scaled_x2)
#
# x10_scaled
point <- unequal_norm[ , 1:2]
point[nrow(point) + 1 , ] = c(1, 0)
x10_scaled <- scale(point)[nrow(point), 1:2]
# x10_scaled_x1 <- (1 - mean(unequal_scales$x1))/sd(unequal_scales$x1)
#
# x10_scaled_x2 <- (0 - mean(unequal_scales$x2))/sd(unequal_scales$x2)
#
# x10_scaled <- c(x10_scaled_x1, x10_scaled_x2)
#
# x10_scaled
point <- unequal_norm[ , 1:2]
point[nrow(point) + 1 , ] = c(1, 0)
x10_scaled <- scale(point)[nrow(point), 1:2]
x10_scaled
x10_scaled_x1 <- (1 - mean(unequal_scales$x1))/sd(unequal_scales$x1)
x10_scaled_x2 <- (0 - mean(unequal_scales$x2))/sd(unequal_scales$x2)
x10_scaled <- c(x10_scaled_x1, x10_scaled_x2)
x10_scaled
# point <- unequal_norm[ , 1:2]
# point[nrow(point) + 1 , ] = c(1, 0)
#
# x10_scaled <- scale(point)[nrow(point), 1:2]
# x10_scaled
unequal_norm$distance_10 <-
sapply(1:nrow(unequal_norm), function(x) sqrt(sum((x10_scaled - unequal_norm[x, 1:2])^2)))
circle_r <- sort(unequal_scales$distance_10)[10]
points_plot <- ggplot(unequal_norm, aes(x1, x2)) +
geom_point(aes(colour = factor(category))) +
scale_color_discrete("Category") +
labs(title = "Scaled x1 vs X2")
points_plot
points_plot +
circle_layer(1, 0, r = circle_r)
points_plot +
circle_layer(x10_scaled[1], x10_scaled[2], r = circle_r)
unequal_norm$distance_10 <-
sapply(1:nrow(unequal_norm), function(x) sqrt(sum((x10_scaled - unequal_norm[x, 1:2])^2)))
circle_r <- sort(unequal_norm$distance_10)[10]
points_plot <- ggplot(unequal_norm, aes(x1, x2)) +
geom_point(aes(colour = factor(category))) +
scale_color_discrete("Category") +
labs(title = "Scaled x1 vs X2")
points_plot
points_plot +
circle_layer(x10_scaled[1], x10_scaled[2], r = circle_r)
points_plot +
circle_layer(x10_scaled[1], x10_scaled[2], r = circle_r) +   scale_x_continuous(limits = c(-5, 5)) +
scale_y_continuous(limits = c(-5, 5))
points_plot +
circle_layer(x10_scaled[1], x10_scaled[2], r = circle_r) +   scale_x_continuous(limits = c(-5, 5)) +
scale_y_continuous(limits = c(-3, 3))
points_plot +
circle_layer(x10_scaled[1], x10_scaled[2], r = circle_r) +   scale_x_continuous(limits = c(-5, 5)) +
scale_y_continuous(limits = c(-8, 8))
View(unequal_norm)
circle_knn_10 <- unequal_norm %>%
filter(distance_10 <= circle_r)
circle_knn_10 %>%
group_by(category) %>%
summarise(n = n())
get("mean(c(5, 4, 8)")
get("mean")(c(5, 4, 8))
install.packages("DBI")
knitr::opts_chunk$set(echo = TRUE)
library(DBI)
library(RSQLite)
library(DBI)
library(RSQLite)
library(tidyverse)
library(DBI)
library(RSQLite)
library(tidyverse)
library(magrittr)
knitr::opts_chunk$set(echo = TRUE)
library(DBI)
library(RSQLite)
library(tidyverse)
library(magrittr)
db_conn <- dbConnect(RSQLite::SQLite(),
dbname = "data/survey.db")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(rjson)
library(lubridate)
knitr::opts_chunk$set(echo = TRUE, message = FALSE)
library(tidyverse)
library(rjson)
library(lubridate)
library(tidyverse)
library(rjson)
library(lubridate)
library(forcats)
browse_hist <- fromJSON(file = "data/Chrome/BrowseHistory.json")
knitr::opts_chunk$set(error = TRUE, collapse = TRUE, comment = "#>")
library(tidyverse)
getwd()
.libPaths()
Sys.getenv('R_LIBS_USER')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
nobs <- 100
b0 <- 1
b1 <- 2
set.seed(1234)
x <- rnorm(nobs, 0, 0.5)
y <- b0 + b1*x+rnorm(nobs, 0, 0.5)
dat.reg <- data_frame(y = y, x = x)
lm.original <- lm(y~x, data=dat.reg)
b1_hat_original <- lm.original$coefficients[2]
summary(lm.original)
nobs <- 100
b0 <- 1
b1 <- 2
set.seed(1234)
x <- rnorm(nobs, 0, 0.5)
y <- b0 + b1*x+rnorm(nobs, 0, 0.5) #the last term is to generate an error relative to the intercept
dat.reg <- data_frame(y = y, x = x)
lm.original <- lm(y~x, data=dat.reg)
b1_hat_original <- lm.original$coefficients[2]
summary(lm.original)
(2 + 0 + 0 + 2)/(3 + 1 + 2 + 3)
install.packages("packrat")
log10(50)
log10(50)*50
log(50, 50)*50
log(50, 50)
log10(50)*50
log(50, 2)
log(50, 2)*50
log(0.5/0.5)
log(0.4/0.6)
log(0.6/0.4)
ln(0.5/0.5)
log10(0.5/0.5)
log10(9)
log10(1/9)
log10(1)
log10(1/9/(8/9))
log10(0.1/0.9)
log10(0.9/0.1)
0.2/0.8
0.01/0.99
0.99/0.01
shiny::runApp('Personal Study/Shiny/test_map/test_map')
install.packages("leaflet")
runApp('Personal Study/Shiny/test_map/test_map')
runApp('Personal Study/Shiny/test_map/test_map')
runApp('Personal Study/Shiny/test_map/test_map')
View(quakes)
runApp('Personal Study/Shiny/test_map/test_map')
runApp('Personal Study/Shiny/test_map/test_map')
runApp('Personal Study/Shiny/test_map/test_map')
runApp('Personal Study/Shiny/test_map/test_map')
runApp('Personal Study/Shiny/test_map/test_map')
runApp('Personal Study/Shiny/test_map/test_map')
runApp('Personal Study/Shiny/test_map/test_map')
iris
runApp('Personal Study/Shiny/test_map/test_map')
runApp('Personal Study/Shiny/test_map/test_map')
runApp('Personal Study/Shiny/test_map/test_map')
runApp('Personal Study/Shiny/test_map/test_map')
runApp('Personal Study/Shiny/test_map/test_map')
runApp('Personal Study/Shiny/test_map/test_map')
runApp('Personal Study/Shiny/test_map/test_map')
runApp('Personal Study/Shiny/test_map/test_map')
runApp('Personal Study/Shiny/test_map/test_map')
runApp('Personal Study/Shiny/test_map/test_map')
runApp('Personal Study/Shiny/test_map/test_map')
runApp('Personal Study/Shiny/test_map/test_map')
runApp('Personal Study/Shiny/test_map/test_map')
runApp('Personal Study/Shiny/test_map/test_map')
runApp('Personal Study/Shiny/test_map/test_map')
runApp('Personal Study/Shiny/test_map/test_map')
runApp('Personal Study/Shiny/test_map/test_map')
runApp('Personal Study/Shiny/test_map/test_map')
runApp('Personal Study/Shiny/test_map/test_map')
runApp('Personal Study/Shiny/test_map/test_map')
runApp('Personal Study/Shiny/test_map/test_map')
runApp('Personal Study/Shiny/test_map/test_map')
runApp('Personal Study/Shiny/test_map/test_map')
runApp('Personal Study/Shiny/test_map/test_map')
runApp('Personal Study/Shiny/test_map/test_map')
test = c("name" = "Johannes", "surname" = "Harmse")
test$name
test['name']
test= list("random" = c(1, 2, 3), 'places' = list('countires' = c('Canada', 'South Africa'), 'cities' = c('Vancouver', 'Cape Town')))
test$random
test$places
random <- list('numbers' = c(1, 2, 3), 'places' = list('countries' = c('Canada', 'South Africa'), 'cities' = c('Vancouver', 'Cape Town')))
random
random$places
random$places$countries
test$places
test['name']
test$name
test = c("name" = "Johannes", "surname" = "Harmse")
test$name
random$places$countries[2]
countries <- c('country1' = 'Canada', 'country2' = 'South Africa')
countries$country2
countries['country2']
countries[2]
50*log(50, 2)
50*log(50, 3)
50*log(50, 1)
50*log(50, 2)
50*log(50, 2.5)
50*log(50, 2.3)
50*log(50, 2.3333333333333)
50*log(50, 2.34)
50*log(50, 2.35)
50*log(50, 2.36)
50*log(50, 2.37)
50*log(50, 2.38)
50*log(50, 2.39)
50*log(50, 2.385)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tuneR)
library(phonTools)
song_files <- list.files(path = paste0('Music/'), pattern = 'Playlist - *')
song_frequencies <- data_frame()
list.files(path = paste0('../../Personal/Music/', song_files[1], '/'), pattern = '*.mp3')
song_files <- list.files(path = paste0('../../Personal/Music/'), pattern = 'Playlist - *')
song_frequencies <- data_frame()
list.files(path = paste0('../../Personal/Music/', song_files[1], '/'), pattern = '*.mp3')
playlist_folders <- list.files(path = paste0('../../Personal/Music/'), pattern = 'Playlist - *')
song_frequencies <- data_frame()
list.files(path = paste0('../../Personal/Music/', playlist_folders[1], '/'), pattern = '*.mp3')
as.integer(5.2)
playlist_folders <- list.files(path = paste0('../../Personal/Music/'), pattern = 'Playlist - *')
song_frequencies <- data_frame('playlist' = character(0))
for (playlist in playlist_folders){
playlist_songs <- list.files(path = paste0('../../Personal/Music/', playlist, '/'), pattern = '*.mp3')
for (song in playlist_songs){
song_file <- song_readMP3(filename =
paste0('../../Personal/Music/',
playlist, '/', song))
rate <- song_file@samp.rate
song_file <- song_file@left
duration <- length(song_file) / rate
frequency_seconds <-
as.data.frame.list(lapply(2:duration,
function(x)
paste0('second_', x-1) = max(Re(fft(song_file[as.integer((x-1)*rate):as.integer(x*rate)])))))
frequency_seconds$playlist <- playlist
song_frequencies <- bind_rows(song_frequencies, frequency_seconds)
}
}
playlist_folders <- list.files(path = paste0('../../Personal/Music/'), pattern = 'Playlist - *')
song_frequencies <- data_frame('playlist' = character(0))
for (playlist in playlist_folders){
playlist_songs <- list.files(path = paste0('../../Personal/Music/', playlist, '/'), pattern = '*.mp3')
for (song in playlist_songs){
song_file <- readMP3(filename =
paste0('../../Personal/Music/',
playlist, '/', song))
rate <- song_file@samp.rate
song_file <- song_file@left
duration <- length(song_file) / rate
frequency_seconds <-
as.data.frame.list(lapply(2:duration,
function(x)
paste0('second_', x-1) = max(Re(fft(song_file[as.integer((x-1)*rate):as.integer(x*rate)])))))
frequency_seconds$playlist <- playlist
song_frequencies <- bind_rows(song_frequencies, frequency_seconds)
}
}
max(Re(fft(song_file[as.integer((1-1)*rate):as.integer(1*rate)])))))
max(Re(fft(song_file[as.integer((1-1)*rate):as.integer(1*rate)])))
lapply(1, function(x) max(Re(fft(song_file[as.integer((1-1)*rate):as.integer(1*rate)]))))
lapply(1, function(x) 'test' = max(Re(fft(song_file[as.integer((1-1)*rate):as.integer(1*rate)]))))
lapply(1, function(x) 'test' = c(max(Re(fft(song_file[as.integer((1-1)*rate):as.integer(1*rate)])))))
lapply(1, function(x) 'test' = max(Re(fft(song_file[as.integer((100-1)*rate):as.integer(100*rate)]))))
playlist_folders <- list.files(path = paste0('../../Personal/Music/'), pattern = 'Playlist - *')
song_frequencies <- data_frame('playlist' = character(0))
for (playlist in playlist_folders){
playlist_songs <- list.files(path = paste0('../../Personal/Music/', playlist, '/'), pattern = '*.mp3')
for (song in playlist_songs){
song_file <- readMP3(filename =
paste0('../../Personal/Music/',
playlist, '/', song))
rate <- song_file@samp.rate
song_file <- song_file@left
duration <- length(song_file) / rate
frequency_seconds <-
as.data.frame.list(lapply(2:duration,
function(x)
paste0('second_', as.character(x-1)) = max(Re(fft(song_file[as.integer((x-1)*rate):as.integer(x*rate)])))))
frequency_seconds$playlist <- playlist
song_frequencies <- bind_rows(song_frequencies, frequency_seconds)
}
}
playlist_folders <- list.files(path = paste0('../../Personal/Music/'), pattern = 'Playlist - *')
song_frequencies <- data_frame('playlist' = character(0))
for (playlist in playlist_folders){
playlist_songs <- list.files(path = paste0('../../Personal/Music/', playlist, '/'), pattern = '*.mp3')
for (song in playlist_songs){
song_file <- readMP3(filename =
paste0('../../Personal/Music/',
playlist, '/', song))
rate <- song_file@samp.rate
song_file <- song_file@left
duration <- length(song_file) / rate
frequency_seconds <-
lapply(2:duration,
function(x)
paste0('second_', x-1) = max(Re(fft(song_file[as.integer((x-1)*rate):as.integer(x*rate)]))))
frequency_seconds <- as.data.frame(frequency_seconds)
frequency_seconds$playlist <- playlist
song_frequencies <- bind_rows(song_frequencies, frequency_seconds)
}
}
playlist_folders <- list.files(path = paste0('../../Personal/Music/'), pattern = 'Playlist - *')
song_frequencies <- data_frame('playlist' = character(0))
for (playlist in playlist_folders){
playlist_songs <- list.files(path = paste0('../../Personal/Music/', playlist, '/'), pattern = '*.mp3')
for (song in playlist_songs){
song_file <- readMP3(filename =
paste0('../../Personal/Music/',
playlist, '/', song))
rate <- song_file@samp.rate
song_file <- song_file@left
duration <- length(song_file) / rate
frequency_seconds <-
lapply(2:duration,
function(x)
max(Re(fft(song_file[as.integer((x-1)*rate):as.integer(x*rate)]))))
frequency_seconds <- as.data.frame(frequency_seconds)
frequency_seconds$playlist <- playlist
song_frequencies <- bind_rows(song_frequencies, frequency_seconds)
}
}
paste0('d', 1:3)
playlist_folders <- list.files(path = paste0('../../Personal/Music/'), pattern = 'Playlist - *')
song_frequencies <- data_frame('playlist' = character(0))
for (playlist in playlist_folders){
playlist_songs <- list.files(path = paste0('../../Personal/Music/', playlist, '/'), pattern = '*.mp3')
for (song in playlist_songs){
song_file <- readMP3(filename =
paste0('../../Personal/Music/',
playlist, '/', song))
rate <- song_file@samp.rate
song_file <- song_file@left
duration <- length(song_file) / rate
frequency_seconds <-
lapply(2:duration,
function(x)
max(Re(fft(song_file[as.integer((x-1)*rate):as.integer(x*rate)]))))
names(frequency_seconds) <- paste0('second_', 1:(duration-1))
frequency_seconds <- as.data.frame(frequency_seconds)
frequency_seconds$playlist <- playlist
song_frequencies <- bind_rows(song_frequencies, frequency_seconds)
}
}
paste0('../../Personal/Music/',
playlist, '/', song)
list.files(path = paste0('../../Personal/Music/', playlist, '/'), pattern = '*.mp3')
list.files(path = paste0('../../Personal/Music/', playlist, '/'), pattern = '.*.mp3')
getwd()
setwd("~/Personal Study/Music_Frequency_Classification/src")
list.files(path = paste0('../../Personal/Music/', playlist, '/'), pattern = '*.mp3')
list.files(path = gsub(" ", "", paste0('../../Personal/Music/', playlist, '/'), pattern = '*.mp3')
list.files(path = gsub(" ", "", paste0('../../Personal/Music/', playlist, '/'), pattern = '*.mp3'))
gsub(' ', '', list.files(path = paste0('../../Personal/Music/', playlist, '/'), pattern = '*.mp3'))
read_csv(' paste0('../../Personal/Music/',
playlist, '/', song)')
read_csv(paste0('../../Personal/Music/',
playlist, '/', song))
getwd( paste0('../../Personal/Music/',
playlist, '/', song))
dir.exists( paste0('../../Personal/Music/',
playlist, '/', song))
dir.exists(paste0('../../Personal/Music/',
playlist, '/', song))
dir.exists(paste0('../../Personal/Music/',
playlist))
song
dir.exists(paste0('../../Personal/Music/',
playlist, '/', gsub('' ', '', song)))
dir.exists(paste0('../../Personal/Music/',
playlist, '/', gsub('' ', '', song))))
dir.exists(paste0('../../Personal/Music/',
playlist, '/', gsub(' ', '', song)))
file.exists(paste0('../../Personal/Music/',
playlist, '/', song))
paste0('../../Personal/Music/',
playlist, '/', song)
paste0('../../Personal/Music/',
playlist, '/', gsub(' ', '\ ', song))
file.exists(paste0('../../Personal/Music/',
playlist, '/', gsub(' ', '\ ', song)))
file.exists(paste0('../../Personal/Music/',
playlist, '/', gsub(' ', '\\ ', song)))
file.exists(gsub(' ', '\ ', paste0('../../Personal/Music/',
playlist, '/', song)))
list.files(paste0('../../Personal/Music/playlist'))
list.files(paste0('../../Personal/Music/playlist/'))
list.files(paste0('../../Personal/Music/', playlist))
list.files(paste0('../../Personal/Music/', playlist), pattern = '*.mp3')
paste0('../../Personal/Music/',
playlist, '/', song)
file.exists(paste0('../../Personal/Music/',
playlist, '/', song))
song
playlist
file.exists(gsub(' ', '\ ', paste0('../../Personal/Music/',
playlist, '/', playlist_songs[2])))
file.exists(gsub(' ', '\ ', paste0('../../Personal/Music/',
playlist, '/', playlist_songs[1])))
file.exists(gsub(' ', '\ ', paste0('../../Personal/Music/',
playlist, '/', playlist_songs)))
file.exists(paste0('../../Personal/Music/',
playlist, '/', playlist_songs))
library(tidyverse)
library(tuneR)
library(phonTools)
playlist_folders <- list.files(path = paste0('../../Personal/Music/'), pattern = 'Playlist - *')
song_frequencies <- data_frame('playlist' = character(0))
for (playlist in playlist_folders){
playlist_songs <- list.files(path = paste0('../../Personal/Music/', playlist, '/'), pattern = '*.mp3')
for (song in playlist_songs){
if (file.exists(paste0('../../Personal/Music/', playlist, '/', song))){
song_file <- readMP3(filename =
paste0('../../Personal/Music/',
playlist, '/', song))
rate <- song_file@samp.rate
song_file <- song_file@left
duration <- length(song_file) / rate
frequency_seconds <-
lapply(2:duration,
function(x)
max(Re(fft(song_file[as.integer((x-1)*rate):as.integer(x*rate)]))))
names(frequency_seconds) <- paste0('second_', 1:(duration-1))
frequency_seconds <- as.data.frame(frequency_seconds)
frequency_seconds$playlist <- playlist
song_frequencies <- bind_rows(song_frequencies, frequency_seconds)
}
}
}
View(song_frequencies)
saveRDS(object = 'song_frequencies', file = '../src/songs_df_1')
saveRDS(object = song_frequencies, file = '../data/songs_df_1')
songs2 = song_frequencies
library(parallel)
detectCores()
library(iterators)
message("df")
integer(detectCores()*0.5)
as.integer(detectCores()*0.5)
as.integer(detectCores()*0.6)
as.integer(detectCores()*0.7)
as.integer(detectCores()*0.75)
100/8
1:4:2
1:5:2
song_freqs <- function(song_directory){
song_file <- readMP3(filename = song_directory)
rate <- song_file@samp.rate
song_file <- song_file@left
duration <- length(song_file) / rate
frequency_seconds <-
lapply(2:duration,
function(x)
max(Re(fft(song_file[as.integer((x-1)*rate):as.integer(x*rate)]))))
names(frequency_seconds) <- paste0('second_', 1:(duration-1))
return(frequency_seconds)
}
View(frequency_seconds)
test = list('hello' = frequency_seconds)
song_freqs <- function(song_directory){
song_file <- readMP3(filename = song_directory)
rate <- song_file@samp.rate
song_file <- song_file@left
duration <- length(song_file) / rate
frequency_seconds <-
lapply(2:duration,
function(x)
max(Re(fft(song_file[as.integer((x-1)*rate):as.integer(x*rate)]))))
names(frequency_seconds) <- paste0('second_', 1:(duration-1))
frequency_seconds <- as.data.frame(frequency_seconds)
frequency_seconds$playlist <- playlist
return(frequency_seconds)
}
song_freqs <- function(song_directory){
song_file <- readMP3(filename = song_directory)
rate <- song_file@samp.rate
song_file <- song_file@left
duration <- length(song_file) / rate
frequency_seconds <-
lapply(2:duration,
function(x)
max(Re(fft(song_file[as.integer((x-1)*rate):as.integer(x*rate)]))))
names(frequency_seconds) <- paste0('second_', 1:(duration-1))
frequency_seconds <- as.data.frame(frequency_seconds)
frequency_seconds$playlist <- playlist
return(frequency_seconds)
}
test <- readRDS('../data/songs_df_1')
